<template>
  <div class="login-container">
    <el-form
      ref="loginForm"
      :model="loginForm"
      :rules="loginRules"
      class="login-form"
      auto-complete="on"
      label-position="left"
    >
      <div class="title-container">
        <img src="./images/headlogo.png" class="logo" />
        <h3 class="title">GPS管道巡线情况统计平台登录</h3>
      </div>

      <el-form-item prop="username">
        <el-input
          id="account"
          ref="username"
          v-model="loginForm.username"
          placeholder="请输入用户名"
          type="text"
          tabindex="1"
          auto-complete="on"
        />
      </el-form-item>

      <el-form-item prop="password">
        <el-input
          id="psw"
          :key="passwordType"
          ref="password"
          v-model="loginForm.password"
          :type="passwordType"
          placeholder="请输入密码"
          tabindex="2"
          auto-complete="on"
        />
      </el-form-item>
      <el-row :gutter="40">
        <el-col :span="12">
            <el-button
              id="login_btn"
              type="primary"
              style="width:100%;"
              @click.native.prevent="handleLogin"
            >登录</el-button>
        </el-col>
        <el-col :span="12">
          <el-button @click="resetForm('loginForm')" style="width:100%;">重置</el-button>
        </el-col>
      </el-row>
    </el-form>
  </div>
</template>

<script>
export default {
  data() {
    const validateUsername = (rule, value, callback) => {
      if (value.length < 1) {
        callback(new Error("请输入用户名"));
      } else {
        callback();
      }
    };
    const validatePassword = (rule, value, callback) => {
      if (value.length < 1) {
        callback(new Error("请输入密码"));
      } else {
        callback();
      }
    };
    return {
      loginForm: {
        username:'',
        password:'',
      },
      loginRules: {
        username: [
          { required: true, trigger: "blur", validator: validateUsername }
        ],
        password: [
          { required: true, trigger: "blur", validator: validatePassword }
        ]
      },
      passwordType: "password",
      redirect: undefined
    };
  },
  mounted(){
    window.addEventListener('keydown',this.keyDown);
  },
  watch: {
    $route: {
      handler: function(route) {
        this.redirect = route.query && route.query.redirect;
      },
      immediate: true
    }
  },
  methods: { 
    keyDown(e){
        //如果是回车则执行登录方法
      if(e.keyCode == 13){
        this.handleLogin();
      }
    },
    handleLogin() {
      this.$refs.loginForm.validate(valid => {
      	  if (valid) {
               let sessionid='';
               this.$myHttp.get('gpsGroups/userLogin?userName=' +this.loginForm.username +'&password=' +this.loginForm.password).then((res) => {
                 let temp=JSON.parse(res.result);
                 if(res.result.indexOf("sessionid")>-1){
                      let data=temp["soap:Envelope"]["soap:Body"]["ns1:UserLoginResponse"]["ns1:out"];
                      this.$Cookie.set("sessionid",data.sessionid.content);
                      this.$Cookie.set('userId',data.login.content);
                 }else{
                   window.vm.$message({
                      type: 'error',
                      message:'请输入正确的用户名和密码',
                      showClose: true,
                      duration: 2000,
                  });
                  this.resetForm('loginForm');
                 }
               }).then(()=>{
                      this.$myHttp.get('gpsGroups/checkUser?userId=' +this.$Cookie.get('userId')+'&sId='+this.$Cookie.get("sessionid")).then((res) => {
                          if(res.result.flag==1){
                            this.$Cookie.set('islogin',res.result.flag);
                            if(res.result.USERNAME==null||res.result.USERNAME==""){
                              this.$Cookie.set('userName',res.result.NAME);
                            }else{
                              this.$Cookie.set('userName',res.result.USERNAME);
                            }
                            this.$Cookie.set('AREAID',res.result.AREAID);
                            this.$Cookie.set('GROUPCODE',res.result.GROUPCODE);
                            this.$Cookie.set('GROUPNAME',res.result.GROUPNAME);
                            this.$Cookie.set('AREANAME',res.result.AREANAME);
                            this.$router.push({ path:'/home'});
                          }else{
                            this.$router.push({ path:'/login'});
                          }
                      });
               });
          } else {
              return false
          }
      });
    },
    resetForm(formName) {
        this.$refs[formName].resetFields();
    }
  }
};
</script>
<style lang="less" scoped>
.login-container {
 background:url('./images/bg.jpg') no-repeat;
	background-size:100% 100%;
	display:flex;
  justify-content:center;
  align-items: center;
  width:100%;height:100%;
  .login-form {
    position: relative;
    height: 350px;
    width:420px;
    box-shadow: 0 0 25px #409eff;
    border-radius: 10px;
    padding: 20px 35px;
    background: #ffffff;
    margin-top:-40px;
  }

  .tips {
    font-size: 14px;
    color: #fff;
    margin-bottom: 10px;
  }


  .title-container {
    position: relative;
    margin-bottom:22px;
    .title {
      font-size: 24px;
      margin: 0px auto;
      font-weight: 600;
      text-align: center;
      font-weight: bold;
      line-height: 36px;
    }
  }
}
.el-form-item {
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 5px;
    color: #454545;
  }
  .logo{display:block;margin:0 auto;width:148px;height:63px;}
</style>
