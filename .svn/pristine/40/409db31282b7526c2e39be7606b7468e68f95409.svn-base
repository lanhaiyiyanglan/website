<template>
  <div class="addList">
    <div class='addTable'>
      <div class='title'>
        {{comtype=='add'?'新增':'编辑'}}{{title}}
        <span
          class="close"
          @click="cancel"
        >{{"×"}}</span>
      </div>
      <div class="formbox">
        <el-form
          ref="ruleForm"
          :rules="rules"
          :model="form"
          label-width="130px"
        >
          <el-form-item label="输油处：">
            <el-input
              v-model="formobj.areainfo.GROUPNAME"
              size="small"
              :disabled='true'
            ></el-input>
          </el-form-item>

          <el-form-item label="站场：">
            <el-input
              v-model="formobj.stationinfo.GROUPNAME"
              size="small"
              :disabled='true'
            ></el-input>
          </el-form-item>

          <el-form-item
            label="名称："
            class="w100"
            prop="name"
          >
            <el-input
              v-model="form.name"
              size="small"
              placeholder="请输入名称"
            ></el-input>
          </el-form-item>

          <el-form-item label="编号：">
            <el-input
              v-model="form.code"
              size="small"
              placeholder="请输入编号"
            ></el-input>
          </el-form-item>

          <el-form-item label="每月巡检：">
            <el-input-number
              v-model="form.frequency"
              :min="1"
              :max="100"
              size="small"
            ></el-input-number>
          </el-form-item>

          <el-form-item
            label="所属管段"
            prop="routeid"
          >
            <el-select
              size="small"
              v-model="form.routeid"
              placeholder="请选择所属管段"
              @change='changeRoute'
              :disabled="comtype == 'edit'?true:false"
            >
              <el-option
                v-for='item in routelist'
                :key='item.ROUTEID'
                :label="item.ROUTENAME"
                :value="item.ROUTEID"
              ></el-option>
            </el-select>
          </el-form-item>

          <el-form-item
            label="管段长度(km)："
            prop="mile"
          >
            <el-input
              v-model="form.mile"
              size="small"
              placeholder="请输入长度" clearable
            ></el-input>
          </el-form-item>

          <el-form-item
            label="起始桩号："
            prop="startstake"
          >
            <el-select
              size="small"
              v-model="form.startstake"
              placeholder="请选择起始桩号"
              v-loading='selectloading'
              filterable v-el-select-loadmore="loadmore" :filter-method="filterVmModel" @change="clearList" clearable
              no-match-text=" "
            >
              <el-option
                v-for='item in takeArr'
                :key='item.STAKEID'
                :label="item.STAKEID"
                :value="item.STAKEID"
              ></el-option>
            </el-select>
          </el-form-item>

          <el-form-item
            label="终止桩号："
            prop="endstake"
          >
            <el-select
              size="small"
              v-model="form.endstake"
              placeholder="请选择终止桩号"
              v-loading='selectloading'
              filterable v-el-select-loadmore="loadmore2" :filter-method="filterVmModel2"  @change="clearList2" clearable
              no-match-text=" "
            >
              <el-option
                v-for='item in takeArr2'
                :key='item.STAKEID'
                :label="item.STAKEID"
                :value="item.STAKEID"
              ></el-option>
            </el-select>
          </el-form-item>
          <template v-if="title!='易打孔盗油点'">
                 <el-form-item
                    label="等级："
                    prop="grade"
                  >
                    <el-select
                      size="small"
                      v-model="form.grade"
                      placeholder="请选择等级"
                      v-loading='Gradeloading'
                    >
                      <el-option
                        v-for='item in gradeList'
                        :key='item.CODEID'
                        :label="item.CODENAME"
                        :value="item.CODEID"
                      ></el-option>
                    </el-select>
                </el-form-item>
                <el-form-item
                  label="类别："
                  prop="type"
                >
                  <el-select
                    size="small"
                    v-loading='typeloading'
                    v-model="form.type"
                    placeholder="请选择类别"
                  >
                    <el-option
                      v-for='item in typeList'
                      :key='item.CODEID'
                      :label="item.CODENAME"
                      :value="item.CODEID"
                    ></el-option>
                  </el-select>
                </el-form-item>
          </template>
          

          <el-form-item label="必经点（桩号）：" class="w100">
            <template>
              <span
                class='addBtn'
                @click="addzhuang"
              >{{"+"}}</span>
              <span
                class='addBtn'
                @click="delzhuang"
              >{{"×"}}</span>
            </template>
          </el-form-item>
          <el-form-item
            label="1"
            class="w100 notxt"
          >
            <template>
              <div class="level1">
                <span
                  v-for='(item,index) in stakes'
                  :key='index'
                  @click='showdetail(item)'
                >{{item.STAKEID}}</span>
              </div>
            </template>
          </el-form-item>
        </el-form>
      </div>

      <div class='confirm'>
        <span
          class="add"
          @click="submit('ruleForm')"
        >确认</span>
        <span
          class="close"
          @click="cancel"
        >取消</span>
      </div>
    </div>

    <el-dialog
      title="提示"
      :visible.sync="dialogbool"
      width="30%"
    >
      <span>这是一段信息</span>
      <span
        slot="footer"
        class="dialog-footer"
      >
        <el-button @click="dialogbool = false">取 消</el-button>
        <el-button
          type="primary"
          @click="dialogbool = false"
        >确 定</el-button>
      </span>
    </el-dialog>
    <DetailCom2
      v-if='detailcombool'
      :takeList='takeList'
      :title='title+"必经点"'
      @submit='getzhuanglist'
      :stakes='stakes'
      :comtype='detailcomtype'
    />

    <DetailComsm
      v-if='detailbool'
      :iteminfo='iteminfo'
    />

  </div>

</template>

<script>
import DetailCom2 from './detailCom2';
import DetailComsm from './detailComsm';
import { formatDate2 } from '../libs/methods';
export default {
  name: 'DetailBox',
  components: {
    DetailCom2,
    DetailComsm,
  },
  props: {
    title: {
      type: String,
      default() {
        return '';
      },
    },
    formobj: {
      type: Object,
      default() {
        return {};
      },
    },
    comtype: {
      type: String,
      default() {
        return '';
      },
    },
    itemid: {
      type: String,
      default() {
        return '';
      },
    },
  },
  directives: {
    // 计算是否滚动到最下面
    'el-select-loadmore': {
      bind (el, binding) {
        const SELECTWRAP_DOM = el.querySelector('.el-select-dropdown .el-select-dropdown__wrap');
        SELECTWRAP_DOM.addEventListener('scroll', function () {
          const condition = Math.round(this.scrollHeight - this.scrollTop) <= this.clientHeight;
          if (condition) {
            binding.value();
          }
        });
      }
    }
  },
  data() {
    return {
      iteminfo: null,
      detailbool: false,
      detailcombool: false,
      dialogbool: false,
      dialogVisible: true,
      selectloading: false,
      Gradeloading: false,
      typeloading: false,
      form: {
        routeid: '',
        code: '',
        frequency: 1,
        endstake: '',
        grade: '',
        mile: '',
        name: '',
        startstake: '',
        serialid: '',
        type: '',
      },
      routelist: [],
      takeList: [],
      takeArr: [],
      takeArr2: [],
      filterText: '', // 输入的筛选项,
      filterText2: '',
      query: {// 分页参数
        page: 1,
        limit: 10
      },
      query2: {// 分页参数
        page: 1,
        limit: 10
      },
      gradeList: [],
      typeList: [],
      stakes: [],
      detailcomtype: 'add',
      rules: {
        name: [{ required: true, message: '请输入名称', trigger: 'blur' }],
        routeid: [
          { required: true, message: '请选择所属管道', trigger: 'change' },
        ],
        mile: [
           { required: true, type: 'string', trigger: 'blur', message:'请输入管段长度'},
           { pattern: /(^[1-9]([0-9]+)?(\.[0-9]{1,2})?$)|(^(0){1}$)|(^[0-9]\.[0-9]([0-9])?$)/, message: '请输入正确格式,可保留两位小数' }
        ],
        startstake: [
          { required: true, message: '请选择起始桩号', trigger: 'change' },
        ],
        endstake: [
          { required: true, message: '请选择终止桩号', trigger: 'change' },
        ],
        grade: [{ required: true, message: '请选择等级', trigger: 'change' }],
        type: [{ required: true, message: '请选择类别', trigger: 'change' }],
      },
    };
  },
  mounted() {
    console.log(144, this.formobj, formatDate2());
    this.getRoutes();
    this.getGradeList();
    this.getTypeList();
    console.log(47888, this.comtype);
    if (this.comtype == 'edit') {
      this.getdetail();
    }
  },
  methods: {
    getdetail() {
      if (this.title == '高后果区') {
        this.getghgdetail();
      } else if (this.title == '高风险段') {
        this.getgfxddetail();
      } else if (this.title == '易打孔盗油点') {
        this.getgydkdetail();
      }
    },
    getgydkdetail() {
      this.$myHttp
        .get('pointManage/getYdkInfo?id=' + this.itemid)
        .then((res) => {
          console.log(res);
          this.form.routeid = res.result.routeid;
          this.form.code = res.result.code ? res.result.code : '';
          this.form.endstake = res.result.endstake;
          this.form.frequency = res.result.frequency;
          this.form.grade = res.result.grade;
          this.form.mile = res.result.mile;
          this.form.name = res.result.name;
          this.form.startstake = res.result.startstake;
          this.form.serialid = res.result.serialid;
          this.form.type = res.result.type;
          let newarr = res.result.stakes ? res.result.stakes.split(',') : [];
          let obj2 = {};
          newarr.map((val, key) => {
            obj2[val] = true;
          });
          this.changeRoute(res.result.routeid, obj2);
        });
    },
    getgfxddetail() {
      this.$myHttp
        .get('pointManage/getGfxInfo?id=' + this.itemid)
        .then((res) => {
          console.log(res);
          this.form.routeid = res.result.routeid;
          this.form.code = res.result.code ? res.result.code : '';
          this.form.endstake = res.result.endstake;
          this.form.frequency = res.result.frequency;
          this.form.grade = res.result.grade;
          this.form.mile = res.result.mile;
          this.form.name = res.result.name;
          this.form.startstake = res.result.startstake;
          this.form.serialid = res.result.serialid;
          this.form.type = res.result.type;
          let newarr = res.result.stakes ? res.result.stakes.split(',') : [];
          let obj2 = {};
          newarr.map((val, key) => {
            obj2[val] = true;
          });
          this.changeRoute(res.result.routeid, obj2);
        });
    },
    getghgdetail() {
      this.$myHttp
        .get('pointManage/getGhgInfo?id=' + this.itemid)
        .then((res) => {
          console.log(res);
          this.form.routeid = res.result.routeid;
          this.form.code = res.result.code ? res.result.code : '';
          this.form.endstake = res.result.endstake;
          this.form.frequency = res.result.frequency;
          this.form.grade = res.result.grade;
          this.form.mile = res.result.mile;
          this.form.name = res.result.name;
          this.form.startstake = res.result.startstake;
          this.form.serialid = res.result.serialid;
          this.form.type = res.result.type;
          let newarr = res.result.stakes ? res.result.stakes.split(',') : [];
          let obj2 = {};
          newarr.map((val, key) => {
            obj2[val] = true;
          });
          this.changeRoute(res.result.routeid, obj2);
        });
    },
    addzhuang() {
      this.detailcomtype = 'add';
      this.detailcombool = true;
    },
    delzhuang() {
      this.detailcomtype = 'del';
      this.detailcombool = true;
    },
    cancel() {
      this.$emit('close');
    },
    submit(formName) {
      this.$refs[formName].validate((valid) => {
        console.log(144, valid);
        if (valid) {
          // alert('submit!');
          let gpsobj = {
            areaid: this.formobj.areainfo.GROUPCODE,
            code: this.form.code,
            createtime: formatDate2(),
            endstake: this.form.endstake,
            frequency: this.form.frequency,
            grade: this.form.grade,
            lastmodified: '',
            mile: this.form.mile,
            modifiedby: '',
            name: this.form.name,
            routeid: this.form.routeid,
            serialid: this.form.serialid ? this.form.serialid : 0, //0为新增，
            stakes: this.getid(this.stakes),
            startstake: this.form.startstake,
            stationid: this.formobj.stationinfo.GROUPCODE,
            status: 0,
            type: this.form.type,
          };
          let obj = {
            stationId: this.formobj.stationinfo.GROUPCODE,
            userId: this.$Cookie.get('userId'),
          };
          if (this.title == '高后果区') {
            obj.gpsGhg = gpsobj;
          } else if (this.title == '高风险段') {
            obj.gpsGfx = gpsobj;
          } else if (this.title == '易打孔盗油点') {
            obj.gpsYdk = gpsobj;
          }
          console.log(77899, obj);
          this.$emit('sub', obj);
        } else {
          console.log('error submit!!');
          return false;
        }
      });
    },
    getid(arr = []) {
      let str = '';
      arr.map((val, key) => {
        str += val.STAKEID;
        str += ',';
      });
      str = str.substring(0, str.length - 1);
      return str;
    },
    //初始化路线
    getRoutes() {
      let that = this;
      that.$myHttp
        .get(
          'pointManage/getRoutesByStationId?stationId=' +
            this.formobj.stationinfo.GROUPCODE
        )
        .then((res) => {
          that.routelist = res.result;
          // this.changeRoute(res.result[0].ROUTEID);
        });
    },
    //根据路线获取桩列表
    async changeRoute(value, obj) {
      await this.getAll(value, obj);
      this.loadmore(true);
      this.loadmore2(true);
    },
    getAll(value, obj){
     return new Promise(resolve=>{
              this.selectloading = true;
              this.$myHttp.get('pointManage/getStakesByRouteId?routeId=' + value).then((res) => {
                    this.takeList = res.result;
                    this.selectloading = false;
                    if (this.comtype == 'edit') {
                      let arr = [];
                      res.result.map((val, key) => {
                        if (obj[val.STAKEID]) {
                          arr.push(val);
                        }
                      }); 
                      this.stakes = arr;
                    }
                    resolve();
              });
    });
  },
   // 分页方法
    loadmore (firstTag) {
      if (!this.filterText) {
        if (!firstTag) {
          this.query.page++
        }
        // 分页开始坐标
        const begin = this.query.limit * (this.query.page - 1)
        // 分页结束坐标
        const end = begin + this.query.limit
        // 这里使用slice 进行分页
        this.takeArr.push(...this.takeList.slice(begin, end))

      }
    },
    loadmore2(firstTag) {
      if (!this.filterText2) {
        if (!firstTag) {
          this.query2.page++
        }
        // 分页开始坐标
        const begin = this.query2.limit * (this.query2.page - 1)
        // 分页结束坐标
        const end = begin + this.query2.limit
        // 这里使用slice 进行分页
        this.takeArr2.push(...this.takeList.slice(begin, end))

      }
    },
    filterVmModel (value) {
      this.form.startstake = value
      this.filterText = value
      // 筛选数据
      if (value) {
        this.takeArr = this.takeList.filter(item => {
          return item.STAKEID && item.STAKEID.indexOf(value) !== -1
        })
      } else {
        // 直接赋值会连续触发 loadmore 分页事件
        this.takeArr = []
        this.$nextTick(() => {
          this.takeArr = this.takeList.slice(0, this.query.limit * this.query.page)
        })
      }

    },
    filterVmModel2(value) {
      this.form.endstake= value;
      this.filterText2 = value;
      // 筛选数据
      if (value) {
        this.takeArr2 = this.takeList.filter(item => {
          return item.STAKEID && item.STAKEID.indexOf(value) !== -1
        })
      } else {
        // 直接赋值会连续触发 loadmore 分页事件
        this.takeArr2 = []
        this.$nextTick(() => {
          this.takeArr2 = this.takeList.slice(0, this.query2.limit * this.query2.page)
        })
      }

    },
    clearList (val) {
      // 移除掉teacher文本框的值时触发方法
      if (!val) {
        this.repeatCode()
      }
    },
    clearList2 (val) {
      // 移除掉teacher文本框的值时触发方法
      if (!val) {
        this.repeatCode2()
      }
    },
    // 重复的代码
    repeatCode () {
      this.form.startstake = '';
      this.filterText = '';
      this.takeArr = [];
      this.query = {
        page: 1,
        limit: 10
      }
      this.loadmore(true)
    },
    repeatCode2() {
      this.form.endstake = '';
      this.filterText2 = '';
      this.takeArr2 = [];
      this.query2 = {
        page: 1,
        limit: 10
      }
      this.loadmore2(true)
    },
    //获取等级列表
    getGradeList() {
      this.Gradeloading = true;
      let type = '';
      if (this.title == '高后果区') {
        type = 'gps_ghg_grade';
      } else if (this.title == '高风险段') {
        type = 'gps_gfx_grade';
      } else if (this.title == '易打孔盗油点') {
        type = 'gps_ydk_grade';
      }
      this.$myHttp
        .get('gpsGroups/getApCodomainsByCode?code=' + type)
        .then((res) => {
          this.gradeList = res.result;
          console.log(114545, res);
          this.Gradeloading = false;
        });
    },
    //获取类别列表
    getTypeList() {
      console.log("title="+this.title);
      this.typeloading = true;
      let type = '';
      if (this.title == '高后果区') {
        type = 'gps_ghg_type';
      } else if (this.title =='高风险段') {
        type = 'gps_gfx_type';
      } else if (this.title =='易打孔盗油点') {
        type = 'gps_ydk_type';
      }
      this.$myHttp
        .get('gpsGroups/getApCodomainsByCode?code=' + type)
        .then((res) => {
          this.typeList = res.result;
          console.log(114545, res);
          this.typeloading = false;
        });
    },
    getzhuanglist(arr1) {
      if (this.detailcomtype == 'add') {
        let arr = this.stakes.concat(arr1);
        let result = [];
        let obj = {};
        for (let i = 0; i < arr.length; i++) {
          if (!obj[arr[i].STAKEID]) {
            result.push(arr[i]);
            obj[arr[i].STAKEID] = true;
          }
        }
        this.stakes = result;
      } else {
        this.stakes = arr1;
      }
    },
    showdetail(item) {
      console.log(878770, item);
      this.iteminfo = item;
      this.detailbool = true;
    },
  },
};
</script>

<style lang="less" scoped>
.addList {
  position: fixed;
  height: 100%;
  width: 100%;
  background: rgba(0, 0, 0, 0.8);
  .addTable {
    width: 80%;
    margin-left: 5%;
    height: 38rem;
    background: #000000;
    .title {
      position: relative;
      height: 60px;
      line-height: 60px;
      text-align: center;
      background: #252932;
      border-bottom: 1px solid #ccc;
      color: #3baaaf;
      .close {
        position: absolute;
        height: 30px;
        line-height: 30px;
        width: 30px;
        right: 15px;
        top: 15px;
        font-size: 25px;
        cursor: pointer;
      }
    }
    .tr {
      height: 45px;
      padding: 5px;
      .lable {
        float: left;
        height: 30px;
        line-height: 30px;
        padding: 0px 15px;
      }
      .el-select {
        float: left;
        height: 30px;
        line-height: 30px;
        margin-right: 30px;
      }
      .el-select input.el-input__inner {
        height: 30px !important;
        line-height: 30px !important;
        background: #1c1e2c;
      }
      .el-input__inner {
        background: #1c1e2c;
        height: 30px;
        line-height: 30px;
      }
    }
    table {
      display: inline-block;
      width: 100%;
      height: calc(~'(100% - 150px)');
      overflow-y: auto;
      border-collapse: collapse;
      thead {
        display: inline-block;
        width: 100%;
        tr {
          display: inline-block;
          width: 100%;
          margin: 0;
          padding: 0;
          th {
            float: left;
            padding: 0;
            margin: 0;
            height: 2rem;
            line-height: 2rem;
            border: 1px solid #1e727e;
            font-size: 18px;
          }
        }
      }
      tbody {
        display: inline-block;
        width: 100%;
        tr {
          display: inline-block;
          width: 100%;
          td {
            float: left;
            padding: 0;
            margin: 0;
            height: 1.6rem;
            line-height: 1.6rem;
            border: 1px solid #1e727e;
            text-align: center;
            overflow: hidden; /*超出部分隐藏*/
            white-space: nowrap; /*不换行*/
            text-overflow: ellipsis; /*超出部分文字以...显示*/
          }
        }
      }
    }
    .confirm {
      position: relative;
      height: 60px;
      line-height: 60px;
      text-align: center;
      background: #252932;
      color: #3baaaf;
      display: flex;
      justify-content: center;
      align-items: center;
      .close {
        display: inline-block;
        height: 30px;
        line-height: 30px;
        width: 60px;
        font-size: 16px;
        cursor: pointer;
        color: #3baaaf;
        border: 1px solid #3baaaf;
        border-radius: 5px;
        margin-left: 20px;
      }
      .add {
        display: inline-block;
        height: 30px;
        line-height: 30px;
        width: 60px;
        font-size: 16px;
        cursor: pointer;
        color: #3baaaf;
        border: 1px solid #3baaaf;
        border-radius: 5px;
      }
    }
  }
}
.formbox {
  overflow: hidden;
  padding: 20px;
  box-sizing: border-box;
  .el-form-item {
    float: left;
    width: 43%;
    height:40px;
    .el-select {
      width: 100%;
    }
    .addBtn {
      display: inline-block;
      text-align: center;
      width: 30px;
      height: 30px;
      line-height: 30px;
      background: #777;
      color: #fff;
      font-size: 20px;
      margin-right: 20px;
      cursor: pointer;
    }

    .level1 {
      // padding-left: 30px;
      min-height: 30px;
      span {
        display: inline-block;
        height: 30px;
        line-height: 30px;
        padding: 0 15px;
        border-radius: 15px;
        border: 1px solid #ccc;
        min-width: 50px;
        margin-right: 20px;
        margin-bottom: 20px;
        cursor: pointer;
      }
    }
  }
  .w100 {
    width:86%;
  }
  .notxt{height:110px;overflow-y:auto;}
}
</style>